// 1266. 访问所有点的最小时间
// 平面上有 n 个点，点的位置用整数坐标表示 points[i] = [xi, yi] 。请你计算访问所有这些点需要的 最小时间（以秒为单位）。

// 你需要按照下面的规则在平面上移动：

// 每一秒内，你可以：
// 沿水平方向移动一个单位长度，或者
// 沿竖直方向移动一个单位长度，或者
// 跨过对角线移动 sqrt(2) 个单位长度（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。
// 必须按照数组中出现的顺序来访问这些点。
// 在访问某个点时，可以经过该点后面出现的点，但经过的那些点不算作有效访问。

// 示例 1：

// 输入：points = [[1,1],[3,4],[-1,0]]
// 输出：7
// 解释：一条最佳的访问路径是： [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]
// 从 [1,1] 到 [3,4] 需要 3 秒
// 从 [3,4] 到 [-1,0] 需要 4 秒
// 一共需要 7 秒
// 示例 2：

// 输入：points = [[3,2],[-2,2]]
// 输出：5

// 提示：

// points.length == n
// 1 <= n <= 100
// points[i].length == 2
// -1000 <= points[i][0], points[i][1] <= 1000

/**
 * @param {number[][]} points
 * @return {number}
 */
var minTimeToVisitAllPoints = function (points) {
  let distance = 0;

  // 判断点和点之间是不是kx+i（斜率k=1）的斜线
  points.reduce((pre, cur, idx, arr) => {
    // 上次返回是数组 则是第一次匹配
    const [i, j] = pre;
    const [k, l] = cur;

    // 获取ij kl的真实横向纵向距离
    let xD = Math.abs(k - i);
    let yD = Math.abs(l - j);

    xD > yD ? (distance += xD) : (distance += yD);

    // 每次都返回当前匹配项
    return cur;
  });

  return distance;
};

var points = [
  [1, 1],
  [3, 4],
  [-1, 0],
];

// var points = [
//   [3, 2],
//   [-2, 2],
// ];

// var points = [
//   [559, 511],
//   [932, 618],
//   [-623, -443],
//   [431, 91],
//   [838, -127],
//   [773, -917],
//   [-500, -910],
//   [830, -417],
//   [-870, 73],
//   [-864, -600],
//   [450, 535],
//   [-479, -370],
//   [856, 573],
//   [-549, 369],
//   [529, -462],
//   [-839, -856],
//   [-515, -447],
//   [652, 197],
//   [-83, 345],
//   [-69, 423],
//   [310, -737],
//   [78, -201],
//   [443, 958],
//   [-311, 988],
//   [-477, 30],
//   [-376, -153],
//   [-272, 451],
//   [322, -125],
//   [-114, -214],
//   [495, 33],
//   [371, -533],
//   [-393, -224],
//   [-405, -633],
//   [-693, 297],
//   [504, 210],
//   [-427, -231],
//   [315, 27],
//   [991, 322],
//   [811, -746],
//   [252, 373],
//   [-737, -867],
//   [-137, 130],
//   [507, 380],
//   [100, -638],
//   [-296, 700],
//   [341, 671],
//   [-944, 982],
//   [937, -440],
//   [40, -929],
//   [-334, 60],
//   [-722, -92],
//   [-35, -852],
//   [25, -495],
//   [185, 671],
//   [149, -452],
// ];
var res = minTimeToVisitAllPoints(points);
console.log('🚀 ~ file: ez-minTimeToVisitAllPoints.js ~ line 82 ~ res', res);
